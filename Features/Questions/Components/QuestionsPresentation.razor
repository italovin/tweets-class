@using Models
@using Models.Validations
@using Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using global::Features.Questions
@using global::Features.Questions.Components
@inherits QuestionsSection
@inject IWebHostEnvironment WebHostEnvironment
@inject AccessKeyService AccessKeyService
@inject ProtectedLocalStorage ProtectedLocalStore

@namespace Features.Questions.Components

<h3>Avaliação dos Tweets</h3>

<hr>

<div>
    <p>Classifique os tweets a seguir conforme o sentimento geral que eles apresentam.
    </p>
    <p>As alternativas são: Negativo, Neutro e Positivo.</p>
</div>

<p>Insira a chave de acesso para iniciar as avaliações</p>

<hr>

<div><label for="accesskey-input">Chave de acesso</label></div>
<div><input id="accesskey-input" class="mb-2" type="password" placeholder="Insira sua chave de acesso" @bind="accessKeyString"></div>
<div>
    <button class="btn btn-primary mb-3" style="width: 10%;" @onclick="ValidateAccessKey">Enviar</button>
</div>
@if(validating){
    <div class="spinner-border text-primary" role="status">
    </div>  
} else {
    <div class="text-danger">
        @accessKeyValidationStatus.Message
    </div>
}

@code{
    [CascadingParameter(Name = "QuestionsFinished")]
    public bool QuestionsFinished { get; set; }
    [Parameter]
    public List<Labeling> LabelingsResponse { get; set; } = new();
    [Parameter]
    public EventCallback<List<Labeling>> LabelingsResponseChanged { get; set; }
    [Parameter]
    public int AccessKeyId { get; set; }
    [Parameter]
    public EventCallback<int> AccessKeyIdChanged { get; set; }
    private string accessKeyString = string.Empty;
    private bool validating = false;
    private AccessKeyValidation accessKeyValidationStatus = new();
    private async Task ValidateAccessKey(){
        validating = true;
        await Task.Yield();
        if(WebHostEnvironment.IsProduction() || WebHostEnvironment.IsStaging())
            accessKeyValidationStatus = await AccessKeyService.ValidateAccessKey(accessKeyString);
        if(!accessKeyValidationStatus.IsError){
            AccessKeyId = accessKeyValidationStatus.Id;
            var accessKeyIdResult = await ProtectedLocalStore.GetAsync<int>("accessKeyId");
            if(accessKeyIdResult.Success){
                if(accessKeyIdResult.Value != AccessKeyId){
                    LabelingsResponse.Clear();
                    await LabelingsResponseChanged.InvokeAsync(LabelingsResponse);
                    await ProtectedLocalStore.DeleteAsync("labelings");
                }
            }
            await ProtectedLocalStore.SetAsync("accessKeyId", accessKeyValidationStatus.Id);
            if(QuestionsFinished){
                ToRevisionSection();
            } else {
                ToFormSection();
            }
        }
        validating = false;
    }
    private void ToFormSection(){
        var AccessKeyIdChangedTask = AccessKeyIdChanged.InvokeAsync(AccessKeyId);
        var OnQuestionsStateChangedTask = OnQuestionsStateChanged(QuestionsStateEnum.Respond);
        Task.WaitAll(AccessKeyIdChangedTask, OnQuestionsStateChangedTask);
    }
    private void ToRevisionSection(){
        var AccessKeyIdChangedTask = AccessKeyIdChanged.InvokeAsync(AccessKeyId);
        var OnQuestionsStateChangedTask = OnQuestionsStateChanged(QuestionsStateEnum.Revision);
        Task.WaitAll(AccessKeyIdChangedTask, OnQuestionsStateChangedTask);
    }
}