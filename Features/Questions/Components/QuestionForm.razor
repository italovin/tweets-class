@using Models
@using Repositories
@using global::Features.Questions
@using global::Features.Questions.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@attribute [StreamRendering]
@inherits QuestionsSection
@inject ProtectedLocalStorage ProtectedLocalStore

@namespace Features.Questions.Components

@if(!finished){
    if(Phrases == null){
    <p><em>Carregando frases...</em></p>
    } else if(Phrases.Count == 0){
        <p><em>Não há frases disponíveis</em></p>
    } else {
    <h3>Frase @(currentPhraseIndex+1) de @phrasesCount</h3>
    <p>@Phrases[currentPhraseIndex].Text</p>
    <div>
        <QuestionButton label="LabelEnum.Negative" QuestionButtonClicked="RespondQuestion"/>
        <QuestionButton label="LabelEnum.Neutral" QuestionButtonClicked="RespondQuestion"/>
        <QuestionButton label="LabelEnum.Positive" QuestionButtonClicked="RespondQuestion"/>
    </div>
    }
} else {
    <p><b>Classificações concluídas</b></p>
}
@code{

    private bool finished = false;

    [CascadingParameter(Name = "Phrases")]
    public List<PhraseCore>? Phrases { get; set; }
    [Parameter]
    public List<Labeling> LabelingsResponse { get; set; } = new();
    [Parameter]
    public EventCallback<List<Labeling>> LabelingsResponseChanged { get; set; }
    private int currentPhraseIndex = 0;
    private int phrasesCount = 0;
    protected override void OnInitialized()
    {
        currentPhraseIndex = LabelingsResponse.Count;
        phrasesCount = Phrases is null ? 0 : Phrases.Count;
    }
    private async Task RespondQuestion(LabelEnum label){
        if(Phrases is not null){
            LabelingsResponse.Add(new(){PhraseId = Phrases[currentPhraseIndex].Id, 
            Label = (int)label});
            await ProtectedLocalStore.SetAsync("labelings", LabelingsResponse);
            if(currentPhraseIndex < phrasesCount - 1){
                currentPhraseIndex++;
            } else if(currentPhraseIndex == phrasesCount - 1){
                finished = true;
            }
            if(finished){
                ToNextSection();
            }
        }
    }
    private void ToNextSection(){
        var LabelingsResponseChangedTask = LabelingsResponseChanged.InvokeAsync(LabelingsResponse);
        var OnQuestionsStateChangedTask = OnQuestionsStateChanged(QuestionsStateEnum.Revision);
        Task.WaitAll(LabelingsResponseChangedTask, OnQuestionsStateChangedTask); 
    }
}