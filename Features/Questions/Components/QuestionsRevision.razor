@using blazor_test.Models
@using blazor_test.Repositories
@using blazor_test.Services
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits QuestionsSection
@inject ProtectedSessionStorage ProtectedSessionStore
@inject AccessKeyService AccessKeyService
@inject LabelingService LabelingService
@inject IWebHostEnvironment WebHostEnvironment

@if(LabelingsResponse == null){
    <p><em>Respostas não encontradas</em></p>
} else {
<div>
    <h3>Revisão das classificações</h3>
    <hr>
    <table class="table">
        <thead>
            <tr>
                <th>Questão</th>
                <th>Frase</th>
                <th>Classificação</th>
            </tr>
        </thead>
        <tbody>
            @for(int i = 0; i < LabelingsResponse.Count; i++){
                <tr>
                    <td>@(i+1)</td>
                    <td>@Phrases[i].Text</td>
                    <td>@LabelParser.ParseLabel((LabelEnum)LabelingsResponse[i].Label).Text</td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary mb-1" @onclick="ToFormSection">Refazer</button>
    <hr>
    <p>Se julgar que não precisa alterar as classificações, clique no botão 'Confirmar'</p>
    <button type="button" class="btn btn-primary mt-1 mb-3" data-bs-toggle="modal" data-bs-target="#confirmModal">Confirmar</button>
    @if(!accessKeyIdFound){
        <div class="text-danger">
            <p>Id de chave não encontrado, reinicie a página</p>
        </div>
    }
    <div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <p class="modal-title">Confirmação</p>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fechar"></button>
                </div>
                <div class="modal-body">
                    <p>Verifique novamente se você deseja alterar alguma classificação. Clique em 'Enviar'
                        caso contrário.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SendResponse">Enviar</button>
                </div>
            </div>

        </div>
    </div>
</div>
}

@code{
    [Parameter]
    public int AccessKeyId { get; set; }
    [Parameter]
    public List<Phrase> Phrases { get; set; } = new();
    [Parameter]
    public List<Labeling> LabelingsResponse { get; set; } = new();
    [Parameter]
    public EventCallback<List<Labeling>> LabelingsResponseChanged { get; set; }
    
    private bool accessKeyIdFound = true; //By convention Id is 'found'
    private async Task SendResponse(){
        if(WebHostEnvironment.IsProduction() || WebHostEnvironment.IsStaging()){
            LabelingService.SendLabelings(LabelingsResponse);
            accessKeyIdFound = await AccessKeyService.Revoke(AccessKeyId);
        }
        
        if(accessKeyIdFound){
            await ProtectedSessionStore.DeleteAsync("phrases");
            await ToConcludedSection();
        }
    }

    private void ToFormSection(){
        LabelingsResponse.Clear();
        var LabelingsResponseChangedTask = LabelingsResponseChanged.InvokeAsync(LabelingsResponse);
        var OnQuestionsStateChangedTask = OnQuestionsStateChanged((int)QuestionsStateEnum.Respond);
        Task.WaitAll(LabelingsResponseChangedTask, OnQuestionsStateChangedTask); 
    }
    private async Task ToConcludedSection(){
        await OnQuestionsStateChanged((int)QuestionsStateEnum.Concluded);
    }
}