@page "/questions"
@using Repositories
@using Testing
@using Features.Questions.Components
@using global::Features.Questions
@using global::Features.Questions.Helpers
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject ProtectedLocalStorage ProtectedLocalStore
@inject IWebHostEnvironment WebHostEnvironment
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

@inject PhraseRepository PhraseRepository

@namespace Features.Questions

<PageTitle>Quest√µes</PageTitle>
<CascadingValue Value="@phrases" Name="Phrases">
    <CascadingValue Value="@questionsFinished" Name="QuestionsFinished">
        @if(questionsState == QuestionsStateEnum.Presentation){
            <QuestionsPresentation @bind-QuestionsState="questionsState" @bind-AccessKeyId="accessKeyId"
             LabelingsResponse="labelingsResponse"></QuestionsPresentation>
        } else if (questionsState == QuestionsStateEnum.Respond){
            <QuestionForm @bind-QuestionsState="questionsState" @bind-LabelingsResponse="labelingsResponse">
            </QuestionForm>
        } else if (questionsState == QuestionsStateEnum.Revision){
            <QuestionsRevision @bind-QuestionsState="questionsState" AccessKeyId="accessKeyId" @bind-LabelingsResponse="labelingsResponse"></QuestionsRevision>
        } else if (questionsState == QuestionsStateEnum.Concluded){
            <QuestionsConcluded></QuestionsConcluded>      
        }
    </CascadingValue>
</CascadingValue>

@code{
    private int questionsToRespond = 0;
    private bool questionsFinished = false;
    private QuestionsStateEnum questionsState = QuestionsStateEnum.Presentation;
    private List<PhraseCore> phrases = new();
    private List<Labeling> labelingsResponse = new();
    private int accessKeyId = 0;
    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            //Production - Final build to azure; Staging - Testing with local mysql db
            if(WebHostEnvironment.IsProduction() || WebHostEnvironment.IsStaging()){
                var ormPhrases = await PhraseRepository.GetPhrases(5);
                phrases = PhraseCoreParser.PhrasesORMToCore(ormPhrases);
                questionsToRespond = phrases.Count;
            }
            else if(WebHostEnvironment.IsDevelopment())
                phrases = PhraseDebug.GenDebugPhrases(questionsToRespond);
            
            var labelingsResult = await ProtectedLocalStore.GetAsync<List<Labeling>>("labelings");
            if(labelingsResult.Value is not null){
                labelingsResponse = labelingsResult.Value;
                if(labelingsResponse.Count == questionsToRespond){
                    questionsFinished = true;
                    StateHasChanged();
                }
            }
        }
        
    }

}