@page "/questions"
@using blazor_test.Repositories
@using blazor_test.Models
@using blazor_test.Testing
@using blazor_test.Features.Questions.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IWebHostEnvironment WebHostEnvironment
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(true))

@inject PhraseRepository PhraseRepository

<PageTitle>Quest√µes</PageTitle>

@if(questionsState == (int)QuestionsStateEnum.Presentation){
    <QuestionsPresentation @bind-QuestionsState="questionsState" @bind-AccessKeyId="accessKeyId"></QuestionsPresentation>
} else if (questionsState == (int)QuestionsStateEnum.Respond){
    <QuestionForm @bind-QuestionsState="questionsState" Phrases="@phrases" @bind-LabelingsResponse="labelingsResponse">
    </QuestionForm>
} else if (questionsState == (int)QuestionsStateEnum.Revision){
    <QuestionsRevision @bind-QuestionsState="questionsState" AccessKeyId="@accessKeyId" Phrases="@phrases" LabelingsResponse="@labelingsResponse"></QuestionsRevision>
} else if (questionsState == (int)QuestionsStateEnum.Concluded){
    <QuestionsConcluded></QuestionsConcluded>      
}

@code{
    private readonly int questionsToRespond = 15;
    private int questionsState = (int)QuestionsStateEnum.Presentation;
    private List<Phrase> phrases = new();
    private List<Labeling> labelingsResponse = new();

    private int accessKeyId = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            var result = await ProtectedSessionStore.GetAsync<List<Phrase>>("phrases");
        
            if(result.Value is not null){
                phrases = result.Value;
            } else {
                //Production - Final build to azure; Staging - Testing with local mysql db
                if(WebHostEnvironment.IsProduction() || WebHostEnvironment.IsStaging())
                    phrases = await PhraseRepository.GetPhrases(questionsToRespond);
                else if(WebHostEnvironment.IsDevelopment())
                    phrases = PhraseDebug.GenDebugPhrases(10);
                await ProtectedSessionStore.SetAsync("phrases", phrases);
            }
        }
        
    }

}