@page "/questions"
@using blazor_test.Repositories
@using blazor_test.Testing
@using blazor_test.Features.Questions.Components
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IWebHostEnvironment WebHostEnvironment
@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(true))

@inject PhraseRepository PhraseRepository

<PageTitle>Quest√µes</PageTitle>
<CascadingValue Value="@phrases" Name="Phrases">
    @if(questionsState == QuestionsStateEnum.Presentation){
        <QuestionsPresentation @bind-QuestionsState="questionsState" @bind-AccessKeyId="accessKeyId"></QuestionsPresentation>
    } else if (questionsState == QuestionsStateEnum.Respond){
        <QuestionForm @bind-QuestionsState="questionsState" @bind-LabelingsResponse="labelingsResponse">
        </QuestionForm>
    } else if (questionsState == QuestionsStateEnum.Revision){
        <QuestionsRevision @bind-QuestionsState="questionsState" AccessKeyId="@accessKeyId" LabelingsResponse="@labelingsResponse"></QuestionsRevision>
    } else if (questionsState == QuestionsStateEnum.Concluded){
        <QuestionsConcluded></QuestionsConcluded>      
    }
</CascadingValue>

@code{
    private readonly int questionsToRespond = 15;
    private QuestionsStateEnum questionsState = QuestionsStateEnum.Presentation;
    private List<PhraseCore> phrases = new();
    private List<Labeling> labelingsResponse = new();
    private int accessKeyId = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender){
        if(firstRender){
            var result = await ProtectedSessionStore.GetAsync<List<PhraseCore>>("phrases");
            
            if(result.Value is not null){
                phrases = result.Value;
            } else {
                //Production - Final build to azure; Staging - Testing with local mysql db
                if(WebHostEnvironment.IsProduction() || WebHostEnvironment.IsStaging())
                    phrases = PhraseCoreParser.PhrasesORMToCore(await PhraseRepository.GetPhrasesWithShuffle(questionsToRespond));
                else if(WebHostEnvironment.IsDevelopment())
                    phrases = PhraseDebug.GenDebugPhrases(questionsToRespond);
                await ProtectedSessionStore.SetAsync("phrases", phrases);
            }
        }
        
    }

}